cmake_minimum_required(VERSION 3.22)
project(Kinoko CXX)

# Compiler and flags
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Common flags
set(COMMON_CXX_FLAGS
    -fPIC
    -DREVOLUTION
    -fno-asynchronous-unwind-tables
    -fno-exceptions
    -fshort-wchar
    -fstack-protector-strong
    -Wall
    -Werror
    -Wextra
    -Wno-delete-non-virtual-dtor
    -Wno-packed-bitfield-compat
    -Wsuggest-override
)

# Bindings flags
set(BINDINGS_CXX_FLAGS
    -DREVOLUTION
    -fstack-protector-strong
    -Wall
    -Werror
    -Wextra
    -Wno-delete-non-virtual-dtor
    -Wno-packed-bitfield-compat
    -Wsuggest-override
)

set(RK_INCLUDE_DIRS
    include
    source
)


# +-------------------------------------------+
# -                 LIBKINOKO                 -
# +-------------------------------------------+

# Source files
file(GLOB_RECURSE SOURCE_FILES CONFIGURE_DEPENDS ${CMAKE_SOURCE_DIR}/**/*.cc)
list(FILTER SOURCE_FILES EXCLUDE REGEX ".*/host/main\\.cc$")
list(FILTER SOURCE_FILES EXCLUDE REGEX ".*/host/KBind.*\\.cc$")

add_library(libkinoko ${SOURCE_FILES})
target_include_directories(libkinoko SYSTEM
    PUBLIC ${RK_INCLUDE_DIRS}
)
target_compile_options(libkinoko PRIVATE ${COMMON_CXX_FLAGS})
target_compile_features(libkinoko PUBLIC cxx_std_23)

# Create targets
add_executable(kinoko source/host/main.cc)
target_link_libraries(kinoko libkinoko)
target_compile_options(kinoko PRIVATE ${COMMON_CXX_FLAGS})

# +-------------------------------------------+
# -                  BINDINGS                 -
# +-------------------------------------------+

# Include Python
find_package(Python REQUIRED COMPONENTS Development)

# Fetch Nanobind
include(FetchContent)
FetchContent_Declare(
    nanobind
    GIT_REPOSITORY https://github.com/wjakob/nanobind.git
)
FetchContent_MakeAvailable(nanobind)

# Add a target
nanobind_add_module(bindings
    source/host/KBindSystem.cc
    source/host/KBindings.cc
)

# Link libraries
target_link_libraries(bindings PRIVATE libkinoko Python::Python)
target_compile_options(bindings PRIVATE ${BINDINGS_CXX_FLAGS})

# +-------------------------------------------+
# -                 TEST CASES                -
# +-------------------------------------------+

# Add a custom target to generate testCases.json
set(TEST_JSON ${CMAKE_CURRENT_SOURCE_DIR}/testCases.json)
set(TEST_BIN ${CMAKE_CURRENT_BINARY_DIR}/testCases.bin)
add_custom_command(
    OUTPUT ${TEST_BIN}  # The file generated by this rule
    DEPENDS ${TEST_JSON}  # Dependency
    COMMAND python3 ${CMAKE_CURRENT_SOURCE_DIR}/tools/generate_tests.py ${TEST_JSON} ${TEST_BIN}
    COMMENT "Running generate_tests.py to create test cases"
)
add_custom_target(
    GenerateTestCases
    ALL
    DEPENDS ${TEST_BIN}  # Ensures this target depends on the generated file
)
