import os
import re
import subprocess

VERSION_FILE = os.path.join('include', 'Version.hh')
GIT_DESCRIBE_CMD = ['git', 'describe', '--tags', '--long', '--dirty']
HASH_FIND_REGEX = re.compile(r"-g([0-9a-f]+)", re.ASCII)
HASH_REMOVE_REGEX = re.compile(r"-g[0-9a-f]+", re.ASCII)


def get_raw_description() -> str:
    try:
        raw = subprocess.check_output(GIT_DESCRIBE_CMD,
                                      stderr=subprocess.DEVNULL)
    except subprocess.CalledProcessError:
        return "unknown-0-dirty"
    return raw.decode('utf-8', errors='ignore').strip()


def strip_hash(raw: str) -> str:
    return HASH_REMOVE_REGEX.sub('', raw)


def find_hash(raw: str) -> str:
    match = HASH_FIND_REGEX.search(raw)
    return match.group(1) if match else 'unknown'


def build_header(version: str, commit_hash: str) -> str:
    return (
        "#pragma once\n\n"
        "// Autogenerated by the build system, do not touch!\n"
        f"static constexpr char GIT_VERSION[] = \"{version}\";\n"
        f"static constexpr char GIT_COMMIT_HASH[] = \"{commit_hash}\";\n"
    )


# NOTE: This is only expected to be invoked by ninja
if __name__ == '__main__':
    raw = get_raw_description()
    version = strip_hash(raw)
    commit_hash = find_hash(raw)
    header = build_header(version, commit_hash)
    with open(VERSION_FILE, 'w') as f:
        f.write(header)
